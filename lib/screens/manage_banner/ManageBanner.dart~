import 'package:pro_deals_admin/utils/imports.dart';

class ManageBanner extends GetView<ManageBannerController> {
  const ManageBanner({super.key});

  @override
  Widget build(BuildContext context) {
    double hit = MediaQuery.of(context).size.height;
    double wid = MediaQuery.of(context).size.width;

    return GetBuilder<ManageBannerController>(
      init: ManageBannerController(ctx: context),
      builder: (controller) {
        return Container(
          color: AppColor.white,
          child: Obx(
            () => FluentThemeWidget(
              widget: TabView(
                currentIndex: controller.currentIndex.value,
                onChanged: (index) => controller.currentIndex.value = index,
                closeButtonVisibility: CloseButtonVisibilityMode.never,
                tabWidthBehavior: TabWidthBehavior.equal,
                tabs: [
                  Tab(
                    text: Text(
                      'All Banner',
                      style: controller.tabTextStyle(index: 0),
                    ),
                    body: Container(),
                  ),
                  Tab(
                    text: Text(
                      'Request Banner',
                      style: controller.tabTextStyle(index: 1),
                    ),
                    body: Container(
                      height: hit,
                      width: wid,
                      color: AppColor.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 20,
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Request Banner',
                            style: AppTextStyle.semiBoldStyle(
                              size: 32,
                              color: AppColor.black300,
                            ),
                          ),
                          const Gap(20),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              controller.isError1.value ||
                                      controller.requestList.isEmpty
                                  ? const Gap(0)
                                  : Text(
                                      'Show ${controller.requestList.length} Entries',
                                      style: GoogleFonts.poppins(
                                        fontSize: 24,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                            ],
                          ),
                          const Gap(20),

                          // Table Header
                          Obx(
                            () => controller.isError1.value ||
                                    controller.requestList.isEmpty
                                ? const Gap(0)
                                : Container(
                                    padding: const EdgeInsets.symmetric(
                                      horizontal: 20,
                                      vertical: 14,
                                    ),
                                    decoration: BoxDecoration(
                                      color: AppColor.tableHeaderBgColor,
                                      borderRadius: BorderRadius.circular(4),
                                      boxShadow: [
                                        BoxShadow(
                                          offset: const Offset(0, 2),
                                          blurRadius: 4,
                                          color:
                                              AppColor.black.withOpacity(0.5),
                                        )
                                      ],
                                    ),
                                    alignment: Alignment.center,
                                    child: Table(
                                      columnWidths: const {
                                        0: FixedColumnWidth(50),
                                        1: FixedColumnWidth(150),
                                        2: FixedColumnWidth(200),
                                        3: FlexColumnWidth(),
                                        4: FixedColumnWidth(150),
                                        5: FlexColumnWidth(),
                                        6: FlexColumnWidth(),
                                      },
                                      children: [
                                        TableRow(
                                          children: [
                                            _buildHeaderText('No.'),
                                            _buildHeaderText('Image'),
                                            _buildHeaderText('Description'),
                                            _buildHeaderText('Offer details'),
                                            _buildHeaderText('Offer Status'),
                                            _buildHeaderText('Valid on'),
                                            _buildHeaderText('Type'),
                                            _buildHeaderText('Action'),
                                          ],
                                        ),
                                      ],
                                    ),
                                  ),
                          ),

                          const Gap(20),

                          // Table Content
                          Obx(
                            () {
                              if (controller.isError1.value) {
                                return _buildErrorView();
                              }

                              if (controller.isLoaded1.value) {
                                if (controller.requestList.isEmpty) {
                                  return _buildEmptyView();
                                }

                                return Expanded(
                                  child: ListView.separated(
                                    itemBuilder: (context, index) {
                                      final request =
                                          controller.requestList[index];
                                      final offer = request.offerId;

                                      return Padding(
                                        padding: const EdgeInsets.symmetric(
                                            horizontal: 20.0),
                                        child: Table(
                                          columnWidths: const {
                                            0: FixedColumnWidth(50),
                                            1: FixedColumnWidth(150),
                                            2: FixedColumnWidth(200),
                                            3: FlexColumnWidth(),
                                            4: FixedColumnWidth(150),
                                            5: FlexColumnWidth(),
                                            6: FlexColumnWidth(),
                                          },
                                          children: [
                                            TableRow(
                                              children: [
                                                _buildRowText('${index + 1}'),
                                                _buildImageCell(
                                                  context: context,
                                                  wid: wid,
                                                  imageData:
                                                      request.image?.data,
                                                  controller: controller,
                                                ),
                                                _buildRowText(
                                                    offer?.description ?? ""),
                                                _buildRowText(
                                                  'Product price: ${offer?.productPrice ?? 0} ₹\n'
                                                  'Discount price: ${offer?.offerPrice ?? 0} '
                                                  '${offer?.offertype == "Amount" ? '₹' : '%'}\n'
                                                  'Payment amount: ${offer?.paymentAmount ?? 0} ₹',
                                                ),
                                                _buildStatusIcon(
                                                    isActive: offer?.isActive ??
                                                        false),
                                                _buildRowText(
                                                    offer?.validOn ?? ""),
                                                _buildRowText(
                                                  controller.getBannerTypeName(
                                                    type: request.type ?? "",
                                                  ),
                                                ),
                                                _buildActionButtons(
                                                  controller: controller,
                                                  context: context,
                                                  index: index,
                                                  isProcessing: !controller
                                                          .isProcess.value &&
                                                      request.sId ==
                                                          controller.bId.value,
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                      );
                                    },
                                    separatorBuilder: (context, index) =>
                                        const Gap(20),
                                    itemCount: controller.requestList.length,
                                  ),
                                );
                              }

                              return CustomCircularIndicator.indicator(
                                color1: Colors.grey.withOpacity(0.5),
                                color: AppColor.black,
                              );
                            },
                          ),

                          const Gap(20),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildHeaderText(String text) {
    return Text(
      text,
      style: AppTextStyle.semiBoldStyle(
        color: AppColor.black,
        size: 20,
      ),
    );
  }

  Widget _buildRowText(String text) {
    return Text(
      text,
      style: AppTextStyle.semiBoldStyle(
        color: AppColor.tableRowTextColor,
        size: 16,
      ),
    );
  }

  Widget _buildImageCell({
    required BuildContext context,
    required double wid,
    required List<int>? imageData,
    required ManageBannerController controller,
  }) {
    return GestureDetector(
      onTap: () {
        controller.zoomImage(data: imageData!, ctx: context, wid: wid);
      },
      child: Padding(
        padding: const EdgeInsets.only(right: 10.0),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(10),
          child: Image.memory(
            Uint8List.fromList(imageData!),
            height: 150,
            width: 150,
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }

  Widget _buildStatusIcon({required bool isActive}) {
    return Container(
      height: 30,
      width: 30,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(5),
        color: isActive ? AppColor.btnGreenColor : AppColor.btnRedColor,
      ),
      child: Icon(
        isActive ? FluentIcons.check_mark : FluentIcons.clear,
        color: AppColor.white,
        size: isActive ? 22 : 15,
      ),
    );
  }

  Widget _buildActionButtons({
    required ManageBannerController controller,
    required BuildContext context,
    required int index,
    required bool isProcessing,
  }) {
    if (isProcessing) {
      return CustomCircularIndicator.indicator(
        color1: Colors.white.withOpacity(0.25),
        color: AppColor.primary,
      );
    }

    return Wrap(
      runSpacing: 10,
      spacing: 5,
      children: [
        _buildActionButton(
          icon: FluentIcons.accept,
          label: 'Accept',
          color: Colors.green,
          onPressed: () => controller.showConfirmationDialog(
            ctx: context,
            i: index,
            isAccept: true,
            type: index,
          ),
        ),
        _buildActionButton(
          icon: FluentIcons.cancel,
          label: 'Reject',
          color: Colors.red,
          onPressed: () => controller.showConfirmationDialog(
            ctx: context,
            i: index,
            isAccept: false,
            type: index,
          ),
        ),
      ],
    );
  }

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required Color color,
    required VoidCallback onPressed,
  }) {
    return FilledButton(
      onPressed: onPressed,
      style: ButtonStyle(
        backgroundColor: WidgetStateProperty.all(color),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: AppColor.white, size: 15),
          const Gap(3),
          Text(
            label,
            style: AppTextStyle.semiBoldStyle(
              color: AppColor.white,
              size: 14,
            ),
          ),
          const Gap(3),
        ],
      ),
    );
  }

  Widget _buildErrorView() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        const Gap(30),
        const Icon(
          FluentIcons.search_issue,
          size: 80,
          color: AppColor.black,
        ),
        const Gap(20),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              child: Text(
                "Something went wrong please try again.",
                textAlign: TextAlign.center,
                style: AppTextStyle.boldStyle(
                  size: 20,
                  color: AppColor.black,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEmptyView() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              child: Text(
                "Banner requests not found.",
                textAlign: TextAlign.center,
                style: AppTextStyle.boldStyle(
                  size: 20,
                  color: AppColor.black,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }
}
